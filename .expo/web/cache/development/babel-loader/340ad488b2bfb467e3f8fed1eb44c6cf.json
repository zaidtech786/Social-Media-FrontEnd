{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar RNSecureStorage = NativeModules.RNSecureStorage;\nexport var ACCESSIBLE = {\n  WHEN_UNLOCKED: 'AccessibleWhenUnlocked',\n  AFTER_FIRST_UNLOCK: 'AccessibleAfterFirstUnlock',\n  ALWAYS: 'AccessibleAlways',\n  WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: 'AccessibleWhenPasscodeSetThisDeviceOnly',\n  WHEN_UNLOCKED_THIS_DEVICE_ONLY: 'AccessibleWhenUnlockedThisDeviceOnly',\n  AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: 'AccessibleAfterFirstUnlockThisDeviceOnly',\n  ALWAYS_THIS_DEVICE_ONLY: 'AccessibleAlwaysThisDeviceOnly'\n};\nexport var ACCESS_CONTROL = {\n  USER_PRESENCE: 'UserPresence',\n  BIOMETRY_ANY: 'BiometryAny',\n  BIOMETRY_CURRENT_SET: 'BiometryCurrentSet',\n  DEVICE_PASSCODE: 'DevicePasscode',\n  APPLICATION_PASSWORD: 'ApplicationPassword',\n  BIOMETRY_ANY_OR_DEVICE_PASSCODE: 'BiometryAnyOrDevicePasscode',\n  BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE: 'BiometryCurrentSetOrDevicePasscode'\n};\nexport var AUTHENTICATION_TYPE = {\n  DEVICE_PASSCODE_OR_BIOMETRICS: 'AuthenticationWithBiometricsDevicePasscode',\n  BIOMETRICS: 'AuthenticationWithBiometrics'\n};\nexport var BIOMETRY_TYPE = {\n  TOUCH_ID: 'TouchID',\n  FACE_ID: 'FaceID',\n  FINGERPRINT: 'Fingerprint'\n};\nvar isAndroid = Platform.OS === 'android';\nvar defaultOptions = {\n  accessControl: null,\n  accessible: ACCESSIBLE.WHEN_UNLOCKED,\n  accessGroup: null,\n  authenticationPrompt: 'Authenticate to retrieve secret data',\n  service: null,\n  authenticateType: AUTHENTICATION_TYPE.DEVICE_PASSCODE_OR_BIOMETRICS\n};\nexport default {\n  getItem: function getItem(key, options) {\n    var finalOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n\n    if (isAndroid) {\n      return RNSecureStorage.getItem(key, finalOptions.service);\n    }\n\n    return RNSecureStorage.getItem(key, finalOptions);\n  },\n  setItem: function setItem(key, value, options) {\n    var finalOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n\n    if (isAndroid) {\n      return RNSecureStorage.setItem(key, value, finalOptions.service);\n    }\n\n    return RNSecureStorage.setItem(key, value, finalOptions);\n  },\n  removeItem: function removeItem(key, options) {\n    var finalOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n\n    if (isAndroid) {\n      return RNSecureStorage.removeItem(key, finalOptions.service);\n    }\n\n    return RNSecureStorage.removeItem(key, finalOptions);\n  },\n  getAllKeys: function getAllKeys(options) {\n    var finalOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n\n    if (isAndroid) {\n      return RNSecureStorage.getAllKeys(finalOptions.service);\n    }\n\n    return RNSecureStorage.getAllKeys(finalOptions);\n  },\n  getSupportedBiometryType: function getSupportedBiometryType() {\n    return RNSecureStorage.getSupportedBiometryType();\n  },\n  canCheckAuthentication: function canCheckAuthentication(options) {\n    var finalOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n\n    if (isAndroid) {\n      return RNSecureStorage.getSupportedBiometryType() !== null;\n    }\n\n    return RNSecureStorage.canCheckAuthentication(options);\n  }\n};","map":{"version":3,"names":["RNSecureStorage","NativeModules","ACCESSIBLE","WHEN_UNLOCKED","AFTER_FIRST_UNLOCK","ALWAYS","WHEN_PASSCODE_SET_THIS_DEVICE_ONLY","WHEN_UNLOCKED_THIS_DEVICE_ONLY","AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY","ALWAYS_THIS_DEVICE_ONLY","ACCESS_CONTROL","USER_PRESENCE","BIOMETRY_ANY","BIOMETRY_CURRENT_SET","DEVICE_PASSCODE","APPLICATION_PASSWORD","BIOMETRY_ANY_OR_DEVICE_PASSCODE","BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE","AUTHENTICATION_TYPE","DEVICE_PASSCODE_OR_BIOMETRICS","BIOMETRICS","BIOMETRY_TYPE","TOUCH_ID","FACE_ID","FINGERPRINT","isAndroid","Platform","OS","defaultOptions","accessControl","accessible","accessGroup","authenticationPrompt","service","authenticateType","getItem","key","options","finalOptions","setItem","value","removeItem","getAllKeys","getSupportedBiometryType","canCheckAuthentication"],"sources":["I:/ReactNative/social_media-app/node_modules/react-native-secure-storage/index.js"],"sourcesContent":["\nimport { NativeModules, Platform } from 'react-native';\n\nconst { RNSecureStorage } = NativeModules;\n\nexport const ACCESSIBLE = {\n  WHEN_UNLOCKED: 'AccessibleWhenUnlocked',\n  AFTER_FIRST_UNLOCK: 'AccessibleAfterFirstUnlock',\n  ALWAYS: 'AccessibleAlways',\n  WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: 'AccessibleWhenPasscodeSetThisDeviceOnly',\n  WHEN_UNLOCKED_THIS_DEVICE_ONLY: 'AccessibleWhenUnlockedThisDeviceOnly',\n  AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY:\n    'AccessibleAfterFirstUnlockThisDeviceOnly',\n  ALWAYS_THIS_DEVICE_ONLY: 'AccessibleAlwaysThisDeviceOnly',\n};\n\nexport const ACCESS_CONTROL = {\n  USER_PRESENCE: 'UserPresence',\n  BIOMETRY_ANY: 'BiometryAny',\n  BIOMETRY_CURRENT_SET: 'BiometryCurrentSet',\n  DEVICE_PASSCODE: 'DevicePasscode',\n  APPLICATION_PASSWORD: 'ApplicationPassword',\n  BIOMETRY_ANY_OR_DEVICE_PASSCODE: 'BiometryAnyOrDevicePasscode',\n  BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE: 'BiometryCurrentSetOrDevicePasscode',\n};\n\nexport const AUTHENTICATION_TYPE = {\n  DEVICE_PASSCODE_OR_BIOMETRICS: 'AuthenticationWithBiometricsDevicePasscode',\n  BIOMETRICS: 'AuthenticationWithBiometrics',\n};\n\nexport const BIOMETRY_TYPE = {\n  TOUCH_ID: 'TouchID',\n  FACE_ID: 'FaceID',\n  FINGERPRINT: 'Fingerprint',\n};\n\nconst isAndroid = Platform.OS === 'android'\n\nconst defaultOptions = {\n  accessControl: null,\n  accessible: ACCESSIBLE.WHEN_UNLOCKED,\n  accessGroup: null,\n  authenticationPrompt: 'Authenticate to retrieve secret data',\n  service: null,\n  authenticateType: AUTHENTICATION_TYPE.DEVICE_PASSCODE_OR_BIOMETRICS,\n}\n\nexport default {\n  getItem(key, options) {\n    const finalOptions = {\n      ...defaultOptions,\n      ...options,\n    }\n    if (isAndroid) {\n      return RNSecureStorage.getItem(key, finalOptions.service)\n    }\n    return RNSecureStorage.getItem(key, finalOptions)\n  },\n  setItem(key, value, options) {\n    const finalOptions = {\n      ...defaultOptions,\n      ...options,\n    }\n    if (isAndroid) {\n      return RNSecureStorage.setItem(key, value, finalOptions.service)\n    }\n    return RNSecureStorage.setItem(key, value, finalOptions)\n  },\n  removeItem(key, options) {\n    const finalOptions = {\n      ...defaultOptions,\n      ...options,\n    }\n    if (isAndroid) {\n      return RNSecureStorage.removeItem(key, finalOptions.service)\n    }\n    return RNSecureStorage.removeItem(key, finalOptions)\n  },\n  getAllKeys(options) {\n    const finalOptions = {\n      ...defaultOptions,\n      ...options,\n    }\n    if (isAndroid) {\n      return RNSecureStorage.getAllKeys(finalOptions.service)\n    }\n    return RNSecureStorage.getAllKeys(finalOptions)\n  },\n  getSupportedBiometryType() {\n    return RNSecureStorage.getSupportedBiometryType()\n  },\n  canCheckAuthentication(options) {\n    const finalOptions = {\n      ...defaultOptions,\n      ...options,\n    }\n    if (isAndroid) {\n      return RNSecureStorage.getSupportedBiometryType() !== null\n    }\n    return RNSecureStorage.canCheckAuthentication(options)\n  },\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}