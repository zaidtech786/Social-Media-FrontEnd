{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport invariant from 'invariant';\nimport { perPlatformTypes } from \"./fileTypes\";\nexport var types = perPlatformTypes[Platform.OS];\nvar RNDocumentPicker = NativeModules.RNDocumentPicker;\nexport function pickDirectory(params) {\n  var result;\n  return _regeneratorRuntime.async(function pickDirectory$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS === 'ios')) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(pick(_objectSpread(_objectSpread({}, params), {}, {\n            mode: 'open',\n            allowMultiSelection: false,\n            type: ['public.folder']\n          })));\n\n        case 3:\n          result = _context.sent;\n          return _context.abrupt(\"return\", {\n            uri: result[0].uri\n          });\n\n        case 7:\n          return _context.abrupt(\"return\", RNDocumentPicker.pickDirectory());\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function pickMultiple(opts) {\n  var options = _objectSpread(_objectSpread({}, opts), {}, {\n    allowMultiSelection: true\n  });\n\n  return pick(options);\n}\nexport function pickSingle(opts) {\n  var options = _objectSpread(_objectSpread({}, opts), {}, {\n    allowMultiSelection: false\n  });\n\n  return pick(options).then(function (results) {\n    return results[0];\n  });\n}\nexport function pick(opts) {\n  var options = _objectSpread({\n    allowMultiSelection: false,\n    type: [types.allFiles]\n  }, opts);\n\n  var newOpts = _objectSpread(_objectSpread({\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical'\n  }, options), {}, {\n    type: Array.isArray(options.type) ? options.type : [options.type]\n  });\n\n  return doPick(newOpts);\n}\n\nfunction doPick(options) {\n  var _options$mode, _options$copyTo;\n\n  invariant(!('filetype' in options), 'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`');\n  invariant(!('types' in options), 'A `types` option was passed to DocumentPicker.pick, the correct option is `type`');\n  invariant(options.type.every(function (type) {\n    return typeof type === 'string';\n  }), \"Unexpected type option in \" + options.type + \", did you try using a DocumentPicker.types.* that does not exist?\");\n  invariant(options.type.length > 0, '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted');\n  invariant(!options.type.includes('folder'), 'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"');\n\n  if ('mode' in options && !['import', 'open'].includes((_options$mode = options.mode) !== null && _options$mode !== void 0 ? _options$mode : '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode);\n  }\n\n  if ('copyTo' in options && !['cachesDirectory', 'documentDirectory'].includes((_options$copyTo = options.copyTo) !== null && _options$copyTo !== void 0 ? _options$copyTo : '')) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo);\n  }\n\n  return RNDocumentPicker.pick(options);\n}\n\nexport function releaseSecureAccess(uris) {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve();\n  }\n\n  invariant(Array.isArray(uris) && uris.every(function (uri) {\n    return typeof uri === 'string';\n  }), \"\\\"uris\\\" should be an array of strings, was \" + uris);\n  return RNDocumentPicker.releaseSecureAccess(uris);\n}\nvar E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED';\nvar E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS';\nexport function isCancel(err) {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED);\n}\nexport function isInProgress(err) {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS);\n}\n\nfunction isErrorWithCode(err, errorCode) {\n  if (err instanceof Error && 'code' in err) {\n    var nativeModuleErrorInstance = err;\n    return (nativeModuleErrorInstance === null || nativeModuleErrorInstance === void 0 ? void 0 : nativeModuleErrorInstance.code) === errorCode;\n  }\n\n  return false;\n}\n\nexport default {\n  isCancel: isCancel,\n  releaseSecureAccess: releaseSecureAccess,\n  pickDirectory: pickDirectory,\n  pick: pick,\n  pickMultiple: pickMultiple,\n  pickSingle: pickSingle,\n  types: types,\n  perPlatformTypes: perPlatformTypes\n};","map":{"version":3,"sources":["index.tsx"],"names":["types","perPlatformTypes","Platform","RNDocumentPicker","NativeModules","result","pick","mode","allowMultiSelection","type","uri","options","results","opts","newOpts","presentationStyle","transitionStyle","Array","doPick","invariant","Promise","uris","E_DOCUMENT_PICKER_CANCELED","E_DOCUMENT_PICKER_IN_PROGRESS","isErrorWithCode","err","nativeModuleErrorInstance","isCancel","releaseSecureAccess","pickDirectory","pickMultiple","pickSingle"],"mappings":"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","sourcesContent":["import { Platform, NativeModules, ModalPropsIOS } from 'react-native'\nimport invariant from 'invariant'\nimport type { PlatformTypes, SupportedPlatforms } from './fileTypes'\nimport { perPlatformTypes } from './fileTypes'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  name: string\n  copyError?: string\n  fileCopyUri: string | null\n  type: string | null\n  size: number | null\n}\n\nexport const types = perPlatformTypes[Platform.OS]\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\ntype DocumentPickerType = {\n  pick(options: Record<string, any>): Promise<DocumentPickerResponse[]>\n  releaseSecureAccess(uris: string[]): Promise<void>\n  pickDirectory(): Promise<DirectoryPickerResponse>\n}\n\nconst RNDocumentPicker: DocumentPickerType = NativeModules.RNDocumentPicker\n\nexport type TransitionStyle = 'coverVertical' | 'flipHorizontal' | 'crossDissolve' | 'partialCurl'\n\nexport type DocumentPickerOptions<OS extends SupportedPlatforms> = {\n  type?:\n    | string\n    | PlatformTypes[OS][keyof PlatformTypes[OS]]\n    | Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  mode?: 'import' | 'open'\n  copyTo?: 'cachesDirectory' | 'documentDirectory'\n  allowMultiSelection?: boolean\n  transitionStyle?: TransitionStyle\n} & Pick<ModalPropsIOS, 'presentationStyle'>\n\nexport async function pickDirectory<OS extends SupportedPlatforms>(\n  params?: Pick<DocumentPickerOptions<OS>, 'presentationStyle' | 'transitionStyle'>,\n): Promise<DirectoryPickerResponse | null> {\n  if (Platform.OS === 'ios') {\n    const result = await pick({\n      ...params,\n      mode: 'open',\n      allowMultiSelection: false,\n      type: ['public.folder'],\n    })\n    return { uri: result[0].uri }\n  } else {\n    return RNDocumentPicker.pickDirectory()\n  }\n}\n\nexport function pickMultiple<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    ...opts,\n    allowMultiSelection: true,\n  }\n  return pick(options)\n}\nexport function pickSingle<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse> {\n  const options = {\n    ...opts,\n    allowMultiSelection: false,\n  }\n  return pick(options).then((results) => results[0])\n}\n\nexport function pick<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    // must be false to maintain old (v5) behavior\n    allowMultiSelection: false,\n    type: [types.allFiles],\n    ...opts,\n  }\n\n  const newOpts: DoPickParams<OS> = {\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical',\n    ...options,\n    type: Array.isArray(options.type) ? options.type : [options.type],\n  }\n\n  return doPick(newOpts)\n}\n\ntype DoPickParams<OS extends SupportedPlatforms> = DocumentPickerOptions<OS> & {\n  type: Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  allowMultiSelection: boolean\n  presentationStyle: NonNullable<ModalPropsIOS['presentationStyle']>\n  transitionStyle: TransitionStyle\n}\n\nfunction doPick<OS extends SupportedPlatforms>(\n  options: DoPickParams<OS>,\n): Promise<DocumentPickerResponse[]> {\n  invariant(\n    !('filetype' in options),\n    'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n  invariant(\n    !('types' in options),\n    'A `types` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n\n  invariant(\n    options.type.every((type: unknown) => typeof type === 'string'),\n    `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`,\n  )\n  invariant(\n    options.type.length > 0,\n    '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted',\n  )\n\n  invariant(\n    // @ts-ignore TS2345: Argument of type 'string' is not assignable to parameter of type 'PlatformTypes[OS][keyof PlatformTypes[OS]]'.\n    !options.type.includes('folder'),\n    'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"',\n  )\n\n  if ('mode' in options && !['import', 'open'].includes(options.mode ?? '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode)\n  }\n\n  if (\n    'copyTo' in options &&\n    !['cachesDirectory', 'documentDirectory'].includes(options.copyTo ?? '')\n  ) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo)\n  }\n\n  return RNDocumentPicker.pick(options)\n}\n\nexport function releaseSecureAccess(uris: Array<string>): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve()\n  }\n\n  invariant(\n    Array.isArray(uris) && uris.every((uri) => typeof uri === 'string'),\n    `\"uris\" should be an array of strings, was ${uris}`,\n  )\n\n  return RNDocumentPicker.releaseSecureAccess(uris)\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED'\nconst E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS'\n\nexport type NativeModuleErrorShape = Error & { code?: string }\n\nexport function isCancel(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED)\n}\n\nexport function isInProgress(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS)\n}\n\nfunction isErrorWithCode(err: unknown, errorCode: string): boolean {\n  if (err instanceof Error && 'code' in err) {\n    const nativeModuleErrorInstance = err as NativeModuleErrorShape\n    return nativeModuleErrorInstance?.code === errorCode\n  }\n  return false\n}\n\nexport default {\n  isCancel,\n  releaseSecureAccess,\n  pickDirectory,\n  pick,\n  pickMultiple,\n  pickSingle,\n  types,\n  perPlatformTypes,\n}\n"]},"metadata":{},"sourceType":"module"}